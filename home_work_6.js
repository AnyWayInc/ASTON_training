// 1) Почитать про принципы программирования KISS, DRY, YAGNI + почитать про "Антипаттерны" Чистого кода

//KISS - оставляй код простым и тупым - принцип написание кода составляя минимальное количество абстракций для его решения, при этом вложенность этих абстракций также минимальна
//DRY - не повторяй сам себя - условно говоря если ты используешь функцию больше 1 раза в коде то лучше будет вынести ее в качестве отдельной функции чтобы не засорять код
//YAGNI - вом это не понадобится - код должен уметь делать только то для чего он был написан и не более 
//Антипаттерны чистого кода
//1 - неявное обозначение переменных (к примеру n,i,scs)
//2 - изменение DOM элементов в цикле
//3 - ссылка не на новый скопированный объект ,а на его ссылку в памяти  и т.д.

// 2) Прочитать про способы хранения LocalStorage, SessionStorage и Cookie

//localStoraga - хранение данных внутри браузера в виде пары ключ - значение, вне зависимости от того закрыл ли пользователь браузер или нет, потенциально - вечно
//SessionStorage - хранение данных ссесии внутри браузера, очищается при закрытии браузера
//Cookie - хранение данных по средствам закодированной строки и отправки ее в виде ключа при каждом запросе и хранится определенное количество времени которое задал разработчик, потенциально - вечно

// 3) HTML / CSS - Базовая структура html документа, БЭМ методология

//Базовая структура HTML документа:

//Базовая структура CSS документа 

//БЭМ - (Блок Элемент Модификатор) - метод разработки программ и интерфейсов, способ описания сущностей, не привязываясь к конкретныйм технологиям реализации.
//Блок - компонент приложения который не связан с другими блоками, также блок может содержать в себе другие блоки и элементы 
//Элемент - часть блока которая выполняет какую либо функцию 
//Модификатор - свойство блока или элемента, отвечающее за внешний вид или поведение блока

// 4) Почитать про паттерны функционального программирования + посмотреть примеры использования

//Патерный функционального программирования:
//1 - Монада Either
//2 - Монада Maybe
//3 - Currying  
//4 - Аппликативность 
//5 - curryN

// 5) Способы позиционирования контента на странице

//position: relative, absolute, static, sticky - css свойство которое определяет положение контента на странице 
//relative - позиционирование относительно его стандартного местоположения на странице , при его использовании можно использовать 
//top,left,bottom,right - параметры которые указывают на смещение местоположения элемента относительно его стандартного 
//absolute - позиционирование относительно родительского элемента, который имеет позиционирование отличное от static не взирая на другие элементы страницы
//при использовании можно также задать параметры top,left,bottom,right
//static - позиционирование элемента в соответствии его места в потоке документа(значение по умолчанию)
//sticky - позиционирование которое фиксируется при скролинге странницы в определенном месте
//fixed - позиционирование относительно окна браузера, т.е. на фиксированном месте страницы независимо от скролинга 
//Также существует способ позиционирование элемента при помощи display
//display: inline, block, flex, grid
//inline - расположение блока элементов в линию в зависимости от их ширины этиъ элементов
//block - расположение элемента по всей ширине страницы каждый элемент блока с новой строки 
//flex - гибкое расположение элементов за счет правильного расположение элементов на странице 
//grid - это макет для сайта (его схема, проект)

// 6) Веса селекторов

//1000 - встроенный инлайн стиль
//100 - идентификатор
//10 - псевдоклассы
//10 - класс 
//10 - атрибут
//1 - псевдоэлемент
//1 = тэги html 

//Если к одному и тому же элементу применяются стили с разным весом, в результате CSS отобразит стиль с наибольшим весом.